package com.outlivethesun.serviceprovider.api

import kotlin.reflect.KClass

open class ServiceProviderException(override val message: String?) : RuntimeException()
open class AutowireServiceProviderException(abstractTypeToAutowire: KClass<out Any>, additionalMessage: String): ServiceProviderException("Unable to create instance for service '${abstractTypeToAutowire.simpleName}'. $additionalMessage")
class AutowireUnautowirableServiceProviderException(abstractTypeToAutowire: KClass<out Any>, implementingClassAnnotatedWithUnautowirable: KClass<out Any>): AutowireServiceProviderException(abstractTypeToAutowire, "No classes found to autowire. Possible solution: Class '${implementingClassAnnotatedWithUnautowirable.simpleName}' found but it is annotated with '@${Unautowirable::class.simpleName}'. Remove annotation to use service '${implementingClassAnnotatedWithUnautowirable.simpleName}'.")
class AutowireNoClassFoundServiceProviderException(abstractTypeToAutowire: KClass<out Any>): AutowireServiceProviderException(abstractTypeToAutowire, "No classes found to autowire. Ensure exactly one class implements the interface '${abstractTypeToAutowire.simpleName}'.")
class AutowireTooManyClassesFoundServiceProviderException(abstractTypeToAutowire: KClass<out Any>, numberOfFoundClasses: Int): AutowireServiceProviderException(abstractTypeToAutowire, "There are $numberOfFoundClasses classes implementing the interface '${abstractTypeToAutowire.simpleName}'. Consider using annotation '@${Unautowirable::class.simpleName}' to reduce the number of implementing classes to one.")
class CircularReferenceServiceProviderException(abstractTypeToAutowire: KClass<out Any>): AutowireServiceProviderException(abstractTypeToAutowire, "Circular reference exists. Consider registering the service '${abstractTypeToAutowire.simpleName}' manually.")
class InvalidConstructorParameterTypeServiceProviderException(classTypeToInstantiate: KClass<out Any>, invalidParameterType: KClass<out Any>): ServiceProviderException("Unable to create service \"${classTypeToInstantiate.simpleName}\". The constructor of class \"${classTypeToInstantiate.simpleName}\" contains invalid parameter type '${invalidParameterType.simpleName}'. Ensure it only contains instantiable parameters.")